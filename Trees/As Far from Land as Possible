class Solution(object):
    def maxDistance(self, grid):
        N = len(grid)
        q = collections.deque()
        # It is used to collect lands from the grid
        for r in range(N): 
            for c in range(N): 
                if grid[r][c] == 1:
                    q.append([r,c] ) 
        # Right , Left , Up , Down  
        direction = [ [0, 1 ] , [1,0] , [0, -1  ] ,[-1,0 ]]
        res = -1 
        # from land we are moving  4 directions and check  If we reached we mark the value   
        while q: 
            r , c = q.popleft()
            res = grid[r][c]

            for dr , dc in direction: 
                newR , newC =   r + dr , c + dc 
                if (min(newR, newC) >= 0 and 
                max(newR ,newC) < N  
                and grid[newR][newC] == 0) :
                    q.append([newR,newC ] )
                    grid[newR][newC] = grid[r][c] + 1

        if res > 1 : 
            return res - 1 
        else: 
            return -1 

           
        #Time Complexity  -O(N²)
        # Space Complexity - O(N²)

