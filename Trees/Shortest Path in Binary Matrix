class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        N = len(grid)                
        q = collections.deque([(0,0,1)])
        visit = set((0,0))
        # Direction of 8 positons     
        direction =[[0,1] , [1,0 ] , [0,-1] , [ -1, 0 ] ,
        [1,1], [-1,-1], [1,-1] , [-1, 1]]
        while q:
            r , c , length  =  q.popleft()
            # Check for the bound and block position
            if (min(r,c) < 0 or max(r,c) >= N
            or grid[r][c]):
                continue
            # If we Visit bottom - Right cell we get the length
            if r == N-1  and  c == N - 1 : 
                return length  

            for dr , dc in direction:
                # If visited the position we don't add  
                if (r+dr , c+dc) not in visit:
                    q.append((r + dr ,  c + dc , length + 1  ) )
                    visit.add((r+dr , c+dc))
        return -1

        # Time Complexity - O(n * 2 )
        # Space Complexity - O(n *2  )    
        # https://leetcode.com/problems/shortest-path-in-binary-matrix/
