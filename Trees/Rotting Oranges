class Solution(object):
    def orangesRotting(self, grid):
        q = deque() 
        time , fresh = 0 , 0 
        ROW , COL = len(grid) ,  len(grid[0])
        # Used to calculate Fresh oranges and rotten oranges positon
        for r in range(ROW): 
            for c in range(COL): 
                if grid[r][c] == 1 : 
                    fresh += 1
                if grid[r][c] == 2: 
                    q.append([r,c])
        
                    # Right  # Left   # Down     #Up
        direction = [[0, 1] ,[1, 0] , [0, -1]  , [-1, 0 ] ]
        while q and fresh > 0 : 
            # len(q) is Default value is same until loop completes  
            for i in range(len(q)):
                r, c = q.pop()  
                for dr , dc in direction: 
                    # We check for the range and oranges is not rotten 
                    row , col = dr + r , dc + c 
                    if (row  < 0  or row == len(grid) or 
                        col < 0 or col == len(grid[0]) or
                        grid[row][col] != 1): 
                        continue

                    grid[row][col] = 2 
                    q.append([row,col])
                    fresh -= 1 

            time += 1
        # Calculate time and return 
        return time if fresh == 0 else -1 

        # Time Complexity - O(n * m)
        # Space Complexity - O(n * m)
        
        # https://leetcode.com/problems/rotting-oranges/


